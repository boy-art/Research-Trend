<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>SHF: Small: Reverse Engineering Variability Implementations</AwardTitle>
    <AwardEffectiveDate>09/01/2013</AwardEffectiveDate>
    <AwardExpirationDate>08/31/2017</AwardExpirationDate>
    <AwardAmount>409997</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Sol J. Greenspan</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Variability in software systems is very common and important to tailor&lt;br/&gt;the system to user needs and to use the system flexibly in different&lt;br/&gt;contexts without developing a new system from scratch for each context.&lt;br/&gt;For example, embedded systems with resource constraints,&lt;br/&gt;high-performance optimizations, and end-user customizable systems all&lt;br/&gt;exploit variability. However variability in software systems creates a&lt;br/&gt;fundamental tension between (a) reuse and (b) development and&lt;br/&gt;maintenance costs. On the one hand, planning variability upfront enables&lt;br/&gt;systematic reuse and promises to significantly reduce development&lt;br/&gt;effort, costs, and time to market. On the other hand, variability&lt;br/&gt;requires an upfront investment and causes long-term maintenance costs,&lt;br/&gt;because variations give rise to an exponential number of configurations&lt;br/&gt; with potentially intricate interactions. Especially if introduced in&lt;br/&gt;an ad-hoc fashion and not managed appropriately, variability can&lt;br/&gt;increase maintenance costs to a level that outweighs the expected&lt;br/&gt;benefits. This research develops and integrates reverse-engineering&lt;br/&gt;techniques for variability to lower upfront investments for variability&lt;br/&gt;and to reduce the costs of long-term maintenance caused by accidental&lt;br/&gt;complexity of existing ad-hoc variability implementations.&lt;br/&gt;&lt;br/&gt;This project revisits how variable and reusable software is implemented&lt;br/&gt;by encouraging lightweight and incremental implementation mechanisms and&lt;br/&gt;providing migration mechanisms for all ad-hoc legacy implementations&lt;br/&gt;common in practice, including conditional compilation (#ifdef),&lt;br/&gt;branches, clones, textual patches, command-line parameters, and&lt;br/&gt;plug-ins. It integrates research from different communities, including&lt;br/&gt;product- line analysis, static analysis, refactoring, concern location,&lt;br/&gt;and architecture recovery toward a common goal of reverse engineering&lt;br/&gt;variability implementations . This integration will allow scaling&lt;br/&gt;research and practice of analyzing and migrating variability from core&lt;br/&gt;calculi to real-world systems of the size and complexity of the Linux&lt;br/&gt;kernel.</AbstractNarration>
    <MinAmdLetterDate>06/24/2013</MinAmdLetterDate>
    <MaxAmdLetterDate>04/10/2015</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1318808</AwardID>
    <Investigator>
      <FirstName>Christian</FirstName>
      <LastName>Kastner</LastName>
      <EmailAddress>kaestner@cmu.edu</EmailAddress>
      <StartDate>06/24/2013</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Carnegie-Mellon University</Name>
      <CityName>PITTSBURGH</CityName>
      <ZipCode>152133815</ZipCode>
      <PhoneNumber>4122689527</PhoneNumber>
      <StreetAddress>5000 Forbes Avenue</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Pennsylvania</StateName>
      <StateCode>PA</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
    <ProgramElement>
      <Code>7944</Code>
      <Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>7923</Code>
      <Text>SMALL PROJECT</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>7944</Code>
      <Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>9251</Code>
      <Text>RES EXPER FOR UNDERGRAD-SUPPLT</Text>
    </ProgramReference>
  </Award>
</rootTag>
