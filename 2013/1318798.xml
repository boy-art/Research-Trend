<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>CSR: Small: Efficient Techniques for Modular Past State Systems</AwardTitle>
    <AwardEffectiveDate>10/01/2013</AwardEffectiveDate>
    <AwardExpirationDate>09/30/2017</AwardExpirationDate>
    <AwardAmount>400000</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05050000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division Of Computer and Network Systems</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>M. Mimi McClure</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Retrospection is the ability of a data store to run ad-hoc programs over consistent past states of a data store as if they were the current state. Retrospection makes it easier to analyze past states providing a valuable tool for auditors, historians, economists, social scientists and others with a need to investigate historical data. Retrospection is also valuable to those who want to analyze past states to predict the future, an increasingly in-demand feature in modern data management applications.&lt;br/&gt;&lt;br/&gt;Most light-weight data stores today do not support retrospection. The key reason is that existing retrospection techniques, for performance, require invasive hard-to-adopt modifications to data store internals. Without support for retrospection, it may be hard for application developers to reconstruct the consistent states corresponding to past events of interest.&lt;br/&gt;&lt;br/&gt;This project will develop an easy-to-adopt modular method and a set of associated techniques for supporting retrospection in light-weight transactional data stores using an&lt;br/&gt;embedded persistent consistent past-state system. The technical challenges are:&lt;br/&gt;1) How to provide consistent past states without harming data store performance? The past state system needs to be tightly integrated for efficiency but extensive modifications to the internal data store components are infeasible, requiring new modular techniques that operate at a low-level in the data store software stack.&lt;br/&gt;2) How to run programs efficiently over past state that spans large time intervals? past state needs to be created incrementally to avoid disrupting the data store but running a program over incremental state can be slow, requiring new clustering and caching techniques optimized for incremental data.&lt;br/&gt;3) Can one avoid slowing down programs that do not use retrospection? To evaluate any additional overhead, the project will develop an experimental prototype in an industrial strength data store, and conduct studies to answer this question experimentally and analytically.</AbstractNarration>
    <MinAmdLetterDate>09/09/2013</MinAmdLetterDate>
    <MaxAmdLetterDate>09/09/2013</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1318798</AwardID>
    <Investigator>
      <FirstName>Liuba</FirstName>
      <LastName>Shrira</LastName>
      <EmailAddress>Liuba@cs.brandeis.edu</EmailAddress>
      <StartDate>09/09/2013</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Brandeis University</Name>
      <CityName>WALTHAM</CityName>
      <ZipCode>024532728</ZipCode>
      <PhoneNumber>7817362121</PhoneNumber>
      <StreetAddress>415 SOUTH ST MAILSTOP 116</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Massachusetts</StateName>
      <StateCode>MA</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7354</Code>
      <Text>COMPUTER SYSTEMS</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>7923</Code>
      <Text>SMALL PROJECT</Text>
    </ProgramReference>
  </Award>
</rootTag>
