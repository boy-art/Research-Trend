<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>CAREER: The Automata Theoretic Method in Software Verification</AwardTitle>
    <AwardEffectiveDate>06/15/2008</AwardEffectiveDate>
    <AwardExpirationDate>05/31/2014</AwardExpirationDate>
    <AwardAmount>400000</AwardAmount>
    <AwardInstrument>
      <Value>Continuing grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Nina Amla</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Proposal Number: 0747041&lt;br/&gt;&lt;br/&gt;TITLE: The Automata Theoretic Method in Software Verification&lt;br/&gt;PI: Madhusudan Parthasarathy&lt;br/&gt;Correct programs are hard to write. Tools that find errors automatically and reliably are essential to ensure engineering of correct software. Automata theory has had a great impact in hardware verification, where it forms the basis of model-checking systems against temporal logics. This project leverages automata-theoretic methods to the field of software verification. Automata theory provides several strikingly new mechanisms for verifying software, including handling of complex control flows of recursion and concurrency, and bridging logical specifications to verification algorithms.&lt;br/&gt;The project will develop these mechanisms and apply them to solve key problems in the following areas of software verification:&lt;br/&gt;- Developing temporal logics for specifying complex event sequence properties of recursive programs;&lt;br/&gt;- Checking atomicity violations in concurrent programs using automata-based monitoring; and&lt;br/&gt;- Verifying heap properties of programs manipulating dynamic data, using a novel automata based abstraction.&lt;br/&gt;In addition, two tools will be developed: one monitors concurrent programs for atomicity violations, and the second implements an abstraction framework to verify heap-intensive programs. The techniques developed will pave innovative pathways into the fundamental problems of analyzing software. The techniques will have immediate impact on analysis tools built and used in the software industry, and significantly advance the landscape of software verification.</AbstractNarration>
    <MinAmdLetterDate>06/10/2008</MinAmdLetterDate>
    <MaxAmdLetterDate>07/17/2012</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>0747041</AwardID>
    <Investigator>
      <FirstName>Madhusudan</FirstName>
      <LastName>Parthasarathy</LastName>
      <EmailAddress>madhu@cs.uiuc.edu</EmailAddress>
      <StartDate>06/10/2008</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>University of Illinois at Urbana-Champaign</Name>
      <CityName>CHAMPAIGN</CityName>
      <ZipCode>618207473</ZipCode>
      <PhoneNumber>2173332187</PhoneNumber>
      <StreetAddress>SUITE A</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Illinois</StateName>
      <StateCode>IL</StateCode>
    </Institution>
    <FoaInformation>
      <Code>0000912</Code>
      <Name>Computer Science</Name>
    </FoaInformation>
    <ProgramElement>
      <Code>7352</Code>
      <Text>COMPUTING PROCESSES &amp; ARTIFACT</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>1045</Code>
      <Text>CAREER: FACULTY EARLY CAR DEV</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>9218</Code>
      <Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>HPCC</Code>
      <Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
    </ProgramReference>
  </Award>
</rootTag>
