<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>Collaborative Research: CSR-PSCE, SM: Adaptive Memory Management in Shared Environments</AwardTitle>
    <AwardEffectiveDate>09/01/2008</AwardEffectiveDate>
    <AwardExpirationDate>08/31/2012</AwardExpirationDate>
    <AwardAmount>266637</AwardAmount>
    <AwardInstrument>
      <Value>Continuing grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05050000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division Of Computer and Network Systems</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Krishna Kant</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Program performance is highly dependent on the amount of memory available to the program. In traditional computing systems, the memory working set of an application has a bounded size - providing more memory to an application improves performance until its working set is met. Once the working set is met, additional memory yields little or no benefit. However, in the presence of garbage collection (a technique for memory management where space that is unlikely to be reused by an application is automatically reclaimed), the relationship between program performance and memory allocation is more complex. Data is managed at three levels: the compiler manages data objects at the program level, the garbage collector manages the heap at the virtual machine level, and the virtual memory manager manages virtual memory at the operating system level. The middle layer plays a critical role. Increasing an application's heap size can reduce the frequency of garbage collections and improve performance, but too large a heap may trigger paging and degrade performance.&lt;br/&gt;&lt;br/&gt;Software developers take advantage of garbage collection (GC) for the many benefits it provides by using either garbage-collecting languages, such as Java and C#, or conventional languages (e.g., C and C++) augmented with conservative garbage collectors. While a conventional program uses exactly as much memory as it needs, the memory use of a garbage-collected program can be adjusted by changing the size of the heap used by the garbage collector. This difference can allow an advanced execution system to control applications' memory demands in response to the changing amount of available memory in a shared environment. This concept is increasingly important for today's multicore, multiprocessor machines.&lt;br/&gt;&lt;br/&gt;Building on previous work, this project develops the technology required to model the memory demand of garbage-collected programs and enable adaptive management in existing virtual machines and operating systems. Specifically, the project extends the PIs' work on whole-program locality and phase models and adaptive memory management, combining program analysis, garbage collection control, and on-line system monitoring.&lt;br/&gt;&lt;br/&gt;This work develops program-level adaptive memory management (PAMM) for garbage-collected programs running concurrently with other garbage-collected programs and with conventional applications. The goal is to adjust all applications' demands to fully use available memory and avoid contention from periods of over demand.</AbstractNarration>
    <MinAmdLetterDate>08/19/2008</MinAmdLetterDate>
    <MaxAmdLetterDate>07/27/2011</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>0834566</AwardID>
    <Investigator>
      <FirstName>Chen</FirstName>
      <LastName>Ding</LastName>
      <EmailAddress>cding@cs.rochester.edu</EmailAddress>
      <StartDate>08/19/2008</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>University of Rochester</Name>
      <CityName>Rochester</CityName>
      <ZipCode>146270140</ZipCode>
      <PhoneNumber>5852754031</PhoneNumber>
      <StreetAddress>518 HYLAN, RC BOX 270140</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>New York</StateName>
      <StateCode>NY</StateCode>
    </Institution>
    <FoaInformation>
      <Code>0000912</Code>
      <Name>Computer Science</Name>
    </FoaInformation>
    <ProgramElement>
      <Code>7354</Code>
      <Text>COMPUTER SYSTEMS</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>7354</Code>
      <Text>COMPUTER SYSTEMS</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>9178</Code>
      <Text>UNDERGRADUATE EDUCATION</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>9216</Code>
      <Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>9218</Code>
      <Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>9251</Code>
      <Text>RES EXPER FOR UNDERGRAD-SUPPLT</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>HPCC</Code>
      <Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
    </ProgramReference>
  </Award>
</rootTag>
