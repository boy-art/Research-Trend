<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>CPA-SEL: Collaborative Research - Continuing Progress Toward Verified Software</AwardTitle>
    <AwardEffectiveDate>09/01/2008</AwardEffectiveDate>
    <AwardExpirationDate>02/28/2013</AwardExpirationDate>
    <AwardAmount>295106</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Sol J. Greenspan</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Most engineered artifacts, such as bridges and nuclear power plants, are tested by subjecting them to operating conditions and observing results.&lt;br/&gt;Software is different. It manifests dynamic behavior when running on computers, and software quality (with respect to achieving specified&lt;br/&gt;behavior) is normally tested that way. But software also can be considered purely symbolic -- a sequence of instructions -- and hence can be subjected to mathematical proof of correctness. Achieving such "verified software" has been identified as a "grand challenge" for computing research. The work of this project's interdisciplinary team of software engineers and logicians focuses on the thesis that practical, scalable, automated software verification is feasible, one component at a time, by combining careful language design with recent advances in automated theorem proving. The plan is to evaluate this thesis empirically by generating the logical verification conditions for a benchmark suite of software components like those used in computing courses and commercial software, and proving them automatically. The project's significance will derive from its proof of concept that the verified software grand challenge can be conquered, and from a better understanding of what the next generation of software engineers need to be taught to produce verified software.</AbstractNarration>
    <MinAmdLetterDate>08/09/2008</MinAmdLetterDate>
    <MaxAmdLetterDate>08/26/2011</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>0811737</AwardID>
    <Investigator>
      <FirstName>Bruce</FirstName>
      <LastName>Weide</LastName>
      <EmailAddress>weide.1@osu.edu</EmailAddress>
      <StartDate>08/09/2008</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Investigator>
      <FirstName>Harvey</FirstName>
      <LastName>Friedman</LastName>
      <EmailAddress>friedman@math.ohio-state.edu</EmailAddress>
      <StartDate>08/09/2008</StartDate>
      <EndDate/>
      <RoleCode>Co-Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Ohio State University Research Foundation -DO NOT USE</Name>
      <CityName>Columbus</CityName>
      <ZipCode>432101016</ZipCode>
      <PhoneNumber>6142923732</PhoneNumber>
      <StreetAddress>1960 KENNY RD</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Ohio</StateName>
      <StateCode>OH</StateCode>
    </Institution>
    <FoaInformation>
      <Code>0000912</Code>
      <Name>Computer Science</Name>
    </FoaInformation>
  </Award>
</rootTag>
