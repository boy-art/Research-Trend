<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>TC: Small: Collaborative Research: Securing Multilingual Software Systems</AwardTitle>
    <AwardEffectiveDate>09/01/2009</AwardEffectiveDate>
    <AwardExpirationDate>08/31/2013</AwardExpirationDate>
    <AwardAmount>215083</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Sol J. Greenspan</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Most real software systems consist of modules developed in&lt;br/&gt;multiple programming languages. Different languages differ in their&lt;br/&gt;security assumptions and guarantees. Consequently, even if single&lt;br/&gt;modules are secure in some language model and with respect to some&lt;br/&gt;security policy, there is usually no uniform security guarantee on a&lt;br/&gt;whole multilingual system. This project focuses on low-overhead&lt;br/&gt;techniques for providing security guarantees to software systems in&lt;br/&gt;which type-safe languages such as Java interoperate with native code.&lt;br/&gt;Native code is developed in low-level languages including C, C++, and&lt;br/&gt;assembly languages. Although often used in software projects, native&lt;br/&gt;code is notoriously insecure and is a rich source of security&lt;br/&gt;vulnerabilities. The PIs are developing a two-layered approach to&lt;br/&gt;alleviating security threats posed by native code to type-safe&lt;br/&gt;languages: (1) Binary rewriting tools and their verifiers are being&lt;br/&gt;incorporated into the Java Virtual Machine (JVM) for rewriting and&lt;br/&gt;verifying native modules at the machine-instruction level to enforce&lt;br/&gt;security policies; (2) A safe dialect of C for interoperation with&lt;br/&gt;Java is being designed; with the help of programmer annotations, the&lt;br/&gt;safety of programs in this dialect can be statically verified. The&lt;br/&gt;outcome of this project will enable popular platforms such as the JVM&lt;br/&gt;and .NET and other major programming languages (e.g., Python, OCaml,&lt;br/&gt;etc.) to incorporate native modules safely. The developed principles&lt;br/&gt;will also be applicable to web browsers and operating systems in which&lt;br/&gt;there is a need of extending them with untrusted low-level modules&lt;br/&gt;without comprising host security.</AbstractNarration>
    <MinAmdLetterDate>09/04/2009</MinAmdLetterDate>
    <MaxAmdLetterDate>09/04/2009</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>0915030</AwardID>
    <Investigator>
      <FirstName>J. Gregory</FirstName>
      <LastName>Morrisett</LastName>
      <EmailAddress>greg.morrisett@cornell.edu</EmailAddress>
      <StartDate>09/04/2009</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Harvard University</Name>
      <CityName>Cambridge</CityName>
      <ZipCode>021385366</ZipCode>
      <PhoneNumber>6174955501</PhoneNumber>
      <StreetAddress>1033 MASSACHUSETTS AVE</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Massachusetts</StateName>
      <StateCode>MA</StateCode>
    </Institution>
  </Award>
</rootTag>
