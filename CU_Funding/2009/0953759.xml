<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>CAREER: Building Immunity to Memory Management Bugs during Production Runs</AwardTitle>
    <AwardEffectiveDate>03/15/2010</AwardEffectiveDate>
    <AwardExpirationDate>02/29/2016</AwardExpirationDate>
    <AwardAmount>420000</AwardAmount>
    <AwardInstrument>
      <Value>Continuing grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Almadena Y. Chtchelkanova</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>The widespread use of software in our society has created unprecedented demand on software availability. Unfortunately, memory management bugs, a major category of common software defects, severely affect system availability. Previous studies have shown that memory management bugs account for 43% of the reported software failures. According to the Vulnerability Notes Database maintained by the U.S. Computer Emergency Readiness Team, memory bugs are dominant in recent vulnerability reports. Memory bugs remain prevalent and challenging to handle during production runs mainly because of three reasons. First, memory bugs are deterministic, failing traditional fault tolerance methods. Second, memory bugs manifested during production runs are hard to reproduce off-site, making them difficult for diagnosis. Third, modern computing trends such as cloud computing and multi-core enable larger and more complicated software, causing memory bugs to slip into the field more easily.&lt;br/&gt;&lt;br/&gt;This project addresses the above challenges. The investigator employs a systematic approach for providing immunity to memory bugs during production runs. The main idea is to perform online diagnosis once a memory bug or failure is detected, then generate and apply runtime immune patches to the running program for surviving and preventing memory bug occurrences or failures caused by memory bugs. The research hinges on the following synergistic thrusts: (1) runtime support of diversified program execution environments for safely and efficiently surviving and preventing memory bug occurrences or failures, which addresses the determinism issue of memory bugs; (2) new algorithms for low-overhead bug diagnosis, which are applied on-site for easy reproduction of memory bugs and best exploitation of on-site bug/failure information; (3) operating system support for lightweight checkpointing and re-execution mechanisms for multi-threaded programs&lt;br/&gt;on modern multi-core systems.</AbstractNarration>
    <MinAmdLetterDate>03/17/2010</MinAmdLetterDate>
    <MaxAmdLetterDate>08/12/2013</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>0953759</AwardID>
    <Investigator>
      <FirstName>Feng</FirstName>
      <LastName>Qin</LastName>
      <EmailAddress>qin@cse.ohio-state.edu</EmailAddress>
      <StartDate>03/17/2010</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Ohio State University Research Foundation -DO NOT USE</Name>
      <CityName>Columbus</CityName>
      <ZipCode>432101016</ZipCode>
      <PhoneNumber>6142923732</PhoneNumber>
      <StreetAddress>1960 KENNY RD</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Ohio</StateName>
      <StateCode>OH</StateCode>
    </Institution>
    <ProgramElement>
      <Code>1045</Code>
      <Text>CAREER: FACULTY EARLY CAR DEV</Text>
    </ProgramElement>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
    <ProgramElement>
      <Code>7942</Code>
      <Text>HIGH-PERFORMANCE COMPUTING</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>1045</Code>
      <Text>CAREER: FACULTY EARLY CAR DEV</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>7942</Code>
      <Text>HIGH-PERFORMANCE COMPUTING</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>1187</Code>
      <Text>PECASE- eligible</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>9218</Code>
      <Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>HPCC</Code>
      <Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
    </ProgramReference>
  </Award>
</rootTag>
