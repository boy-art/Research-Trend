<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>Program Generation for Parallel Platforms</AwardTitle>
    <AwardEffectiveDate>06/01/2007</AwardEffectiveDate>
    <AwardExpirationDate>05/31/2011</AwardExpirationDate>
    <AwardAmount>381000</AwardAmount>
    <AwardInstrument>
      <Value>Continuing grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Almadena Y. Chtchelkanova</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>The clock speed of microprocessors has finally reached its practical limits. Future performance gains will only be obtained through various forms of parallelism such as integrating multiple CPU cores on one chip: The area of mainstream parallelism has started. This will pose an enormous burden on the developers of high performance libraries. Optimal code has to be carefully tuned to every specific platform including its memory hierarchy, special instruction sets, and the forms of parallelism it provides. This time-consuming process is repeated for every new platform released. It is time to ask the question: Can computers write these libraries for us?&lt;br/&gt;&lt;br/&gt;The goal of this research is to develop a program generation system that completely&lt;br/&gt;automates the implementation and optimization of a large class of performance-critical library functionality. This class will at least include linear transforms, a set of dense linear algebra problems, correlation, a set of decoders, and numerical integration. The program generation system will produce code that is optimized to a computer's memory hierarchy and that is parallelized, if required, for vector architectures, shared or distributed memory parallelism, or even streaming parallelism in graphics processing units (GPUs), or a for a combination of those. The performance of the generated code should be competitive with the best hand-written code available. "Program generation" means that the system takes as input only the problem specification. In other words, the computer itself writes highly optimized and, if desired, already parallelized source code. To achieve this, the knowledge about alternative algorithms and about algorithm optimization has to be formalized in a way that it can be done by the computer. In summary, the goal is to enable computers to write very fast libraries for well-understood numerical functionality and for a wide range of parallel platforms.</AbstractNarration>
    <MinAmdLetterDate>05/29/2007</MinAmdLetterDate>
    <MaxAmdLetterDate>08/16/2010</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>0702386</AwardID>
    <Investigator>
      <FirstName>Markus</FirstName>
      <LastName>Pueschel</LastName>
      <EmailAddress>pueschel@ece.cmu.edu</EmailAddress>
      <StartDate>08/16/2010</StartDate>
      <EndDate/>
      <RoleCode>Co-Principal Investigator</RoleCode>
    </Investigator>
    <Investigator>
      <FirstName>Markus</FirstName>
      <LastName>Pueschel</LastName>
      <EmailAddress>pueschel@ece.cmu.edu</EmailAddress>
      <StartDate>05/29/2007</StartDate>
      <EndDate>08/16/2010</EndDate>
      <RoleCode>Former Principal Investigator</RoleCode>
    </Investigator>
    <Investigator>
      <FirstName>Franz</FirstName>
      <LastName>Franchetti</LastName>
      <EmailAddress>franzf@ece.cmu.edu</EmailAddress>
      <StartDate>08/16/2010</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Investigator>
      <FirstName>Franz</FirstName>
      <LastName>Franchetti</LastName>
      <EmailAddress>franzf@ece.cmu.edu</EmailAddress>
      <StartDate>05/29/2007</StartDate>
      <EndDate>08/16/2010</EndDate>
      <RoleCode>Former Co-Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Carnegie-Mellon University</Name>
      <CityName>PITTSBURGH</CityName>
      <ZipCode>152133815</ZipCode>
      <PhoneNumber>4122689527</PhoneNumber>
      <StreetAddress>5000 Forbes Avenue</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Pennsylvania</StateName>
      <StateCode>PA</StateCode>
    </Institution>
    <FoaInformation>
      <Code>0000912</Code>
      <Name>Computer Science</Name>
    </FoaInformation>
  </Award>
</rootTag>
