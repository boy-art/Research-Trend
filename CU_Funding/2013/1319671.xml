<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>SHF: Small: VeriQ: Formal Quantitative Software Verification in Realistic Application Scenarios</AwardTitle>
    <AwardEffectiveDate>07/01/2013</AwardEffectiveDate>
    <AwardExpirationDate>06/30/2017</AwardExpirationDate>
    <AwardAmount>449721</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Nina Amla</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>The goal of the VeriQ project is to develop techniques for the formal&lt;br/&gt;verification of quantitative properties of software. Every program&lt;br/&gt;requires a certain amount of resources such as memory, power, and&lt;br/&gt;processor cycles to perform its task. A proof that the resources&lt;br/&gt;provided by the hardware of the system are sufficient to safely&lt;br/&gt;execute a program should be the first step in the verification of that&lt;br/&gt;program. In addition to the verification of such resource-usage&lt;br/&gt;bounds, there are a vast number of domain-specific quantitative&lt;br/&gt;properties that are crucial for the correctness of software. Finally,&lt;br/&gt;reasoning about quantities can simplify the verification of&lt;br/&gt;non-quantitative properties such as termination. By advancing the&lt;br/&gt;state-of-the art in quantitative verification, VeriQ facilitates the&lt;br/&gt;development of reliable, efficient and predictable software systems.&lt;br/&gt;&lt;br/&gt;The investigators focus on three technical goals that are among the&lt;br/&gt;most important problems in the field of quantitative verification.&lt;br/&gt;First, they develop an automatic and compositional resource analysis&lt;br/&gt;for programs that are written in high-level languages with garbage&lt;br/&gt;collection, side effects, and higher-order functions. Second, they&lt;br/&gt;apply the techniques from resource analysis for high-level languages&lt;br/&gt;to simplify the reasoning about quantitative properties of realistic&lt;br/&gt;system code with concurrent execution and advanced control flow.&lt;br/&gt;Third, they investigate the relationship between quantitative&lt;br/&gt;properties and liveness properties with the goal of utilizing&lt;br/&gt;quantitative reasoning techniques in correctness proofs of software&lt;br/&gt;verification.</AbstractNarration>
    <MinAmdLetterDate>07/12/2013</MinAmdLetterDate>
    <MaxAmdLetterDate>09/24/2015</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1319671</AwardID>
    <Investigator>
      <FirstName>Zhong</FirstName>
      <LastName>Shao</LastName>
      <EmailAddress>shao@cs.yale.edu</EmailAddress>
      <StartDate>07/12/2013</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Investigator>
      <FirstName>Jan</FirstName>
      <LastName>Hoffmann</LastName>
      <EmailAddress>jhoffmann@cmu.edu</EmailAddress>
      <StartDate>07/12/2013</StartDate>
      <EndDate/>
      <RoleCode>Co-Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Yale University</Name>
      <CityName>New Haven</CityName>
      <ZipCode>065208327</ZipCode>
      <PhoneNumber>2037854689</PhoneNumber>
      <StreetAddress>Office of Sponsored Projects</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Connecticut</StateName>
      <StateCode>CT</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7943</Code>
      <Text>PROGRAMMING LANGUAGES</Text>
    </ProgramElement>
    <ProgramElement>
      <Code>7944</Code>
      <Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>7923</Code>
      <Text>SMALL PROJECT</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>7943</Code>
      <Text>PROGRAMMING LANGUAGES</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>7944</Code>
      <Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
    </ProgramReference>
  </Award>
</rootTag>
