<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>XPS: FP: Program Synthesis for Low-Power Spatial Architectures</AwardTitle>
    <AwardEffectiveDate>10/01/2013</AwardEffectiveDate>
    <AwardExpirationDate>09/30/2017</AwardExpirationDate>
    <AwardAmount>765879</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Anindya Banerjee</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>New computing applications require dramatic increases in the energy efficiency of processors. These applications include personal health monitoring with wearable body sensors and data processing onboard tiny robotic rescue helicopters. Energy efficiency allows such applications to run on small batteries, thus achieving the necessary small form factor. Until recently, energy efficiency was achieved by shrinking transistors. While the Moore's Law still keeps shrinking transistors, the smaller transistors are no longer significantly more energy efficient than large ones. As a result, the quest for energy efficiency has shifted from transistor fabrication to designing software and hardware that work well together. Among key questions is how minimalistic can hardware be without affecting the productivity of programming that hardware. Minimalistic hardware would not burn energy on tasks that support programmability, so investigating how to compile programs for minimalistic hardware is of increased interest.&lt;br/&gt;&lt;br/&gt;Traditionally, hardware complexity has been hidden under a programming model and a compiler. The less heroic the compiler, the more likely was the technology to succeed (c.f., CUDA's widespread adoption). Unfortunately, a simple compiler breaks down on hardware without programmability features such as caches. This proposal investigates extending the compiler with a synthesizer, which has the power to search a space of alternative programs. The design decision to rely on search frees the compiler writer from having to develop a (deterministic) compilation algorithm. As a case study, this project addresses the programmability question through a programming framework for a spatial ultra-low-power processor design. The framework includes a programming model and a synthesis-aided compiler tool chain. The programming model develops a solver-aided domain specific language (SDSL) that includes constructs for partitioning programs across processor cores. The SDLS is implemented on the Rosette framework for SDSL construction.</AbstractNarration>
    <MinAmdLetterDate>09/23/2013</MinAmdLetterDate>
    <MaxAmdLetterDate>09/03/2015</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1337415</AwardID>
    <Investigator>
      <FirstName>George</FirstName>
      <LastName>Necula</LastName>
      <EmailAddress>necula@cs.berkeley.edu</EmailAddress>
      <StartDate>09/03/2015</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Investigator>
      <FirstName>Rastislav</FirstName>
      <LastName>Bodik</LastName>
      <EmailAddress>bodik@uw.edu</EmailAddress>
      <StartDate>09/23/2013</StartDate>
      <EndDate>09/03/2015</EndDate>
      <RoleCode>Former Principal Investigator</RoleCode>
    </Investigator>
    <Investigator>
      <FirstName>Emina</FirstName>
      <LastName>Torlak</LastName>
      <EmailAddress>emina@cs.washington.edu</EmailAddress>
      <StartDate>09/23/2013</StartDate>
      <EndDate/>
      <RoleCode>Co-Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>University of California-Berkeley</Name>
      <CityName>BERKELEY</CityName>
      <ZipCode>947045940</ZipCode>
      <PhoneNumber>5106428109</PhoneNumber>
      <StreetAddress>Sponsored Projects Office</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>California</StateName>
      <StateCode>CA</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
    <ProgramElement>
      <Code>8283</Code>
      <Text>Exploiting Parallel&amp;Scalabilty</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>7943</Code>
      <Text>PROGRAMMING LANGUAGES</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>9251</Code>
      <Text>RES EXPER FOR UNDERGRAD-SUPPLT</Text>
    </ProgramReference>
  </Award>
</rootTag>
