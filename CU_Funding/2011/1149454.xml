<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>CAREER: Automated Concurrency Debugging ? An Essential Ingredient for Safety-Critical Software Assurance and Security</AwardTitle>
    <AwardEffectiveDate>01/01/2012</AwardEffectiveDate>
    <AwardExpirationDate>12/31/2017</AwardExpirationDate>
    <AwardAmount>526042</AwardAmount>
    <AwardInstrument>
      <Value>Continuing grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Nina Amla</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Detecting and repairing concurrent software defects has always been labor-intensive due to the inherent complexity in analyzing the astronomically large number of thread interleavings. The situation is exacerbated by the increasingly widespread use of multicore processors, whose computing power can only be unleashed by concurrent software. Automation of this detection and repair process promises to drastically reduce the time spent in debugging such systems, leading to reliable and secure software as well as fully utilized parallel hardware. The objective of this research is to improve the concurrent software reliability and security through innovations in automated concurrency debugging. &lt;br/&gt;&lt;br/&gt;This project will investigate new theoretical and algorithmic advances, and tools to fully automate the crucial process of bug detection, diagnosis, repair, and optimization for large concurrent software. The unifying theme of this research is the judicious application of logical constraint based symbolic methods and automated thread interference abstractions. Symbolic methods will mitigate interleaving explosion, which is the major scalability bottleneck in concurrent software analysis, verification, synthesis and maintenance. Interference abstraction will enable the use of the most economical methods to analyze properties of the system via under- or over-approximated modeling of thread interactions. The PI will incorporate the results from this research into the undergraduate computing curriculum and summer retraining courses for Information Technology (IT) practioners with the aim of maintaining the competitive vitality of the U.S. IT workforce.</AbstractNarration>
    <MinAmdLetterDate>12/13/2011</MinAmdLetterDate>
    <MaxAmdLetterDate>02/08/2016</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1149454</AwardID>
    <Investigator>
      <FirstName>Chao</FirstName>
      <LastName>Wang</LastName>
      <EmailAddress>wang626@usc.edu</EmailAddress>
      <StartDate>12/13/2011</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Virginia Polytechnic Institute and State University</Name>
      <CityName>BLACKSBURG</CityName>
      <ZipCode>240610001</ZipCode>
      <PhoneNumber>5402315281</PhoneNumber>
      <StreetAddress>Sponsored Programs 0170</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Virginia</StateName>
      <StateCode>VA</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
    <ProgramElement>
      <Code>7944</Code>
      <Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>1045</Code>
      <Text>CAREER: FACULTY EARLY CAR DEV</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>7944</Code>
      <Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>8206</Code>
      <Text>Formal Methods and Verification</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>9178</Code>
      <Text>UNDERGRADUATE EDUCATION</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>9251</Code>
      <Text>RES EXPER FOR UNDERGRAD-SUPPLT</Text>
    </ProgramReference>
  </Award>
</rootTag>
