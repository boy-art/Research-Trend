<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>Reasoning About Low-Level Programming</AwardTitle>
    <AwardEffectiveDate>09/01/2002</AwardEffectiveDate>
    <AwardExpirationDate>08/31/2005</AwardExpirationDate>
    <AwardAmount>300000</AwardAmount>
    <AwardInstrument>
      <Value>Continuing grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Sol J. Greenspan</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Research is proposed on the specification and verification of computer programs written in languages that provide a low-level view of storage and other resources. This research will focus on novel formal methods for two particularly crucial programming techniques:Shared mutable data structure - the use of representations that may contain more than one pointer to a location that can be updated by the program. These data representations will be specified in an extension of predicate logic, called separation logic, in which the structure of assertions mirrors the separation of storage into&lt;br/&gt;Disjoint components. Embedded code pointers - the use of data representations&lt;br/&gt;Containing updatable components that point to program instructions. &lt;br/&gt;Programs using code pointers will be specified by using a reflection&lt;br/&gt;Operator that allows code to occur within assertions.&lt;br/&gt;&lt;br/&gt;Specific aspects of low-level programming to be investigated include&lt;br/&gt;storage allocation, share-variable concurrency, and the relation&lt;br/&gt;between specifications and tye systems.&lt;br/&gt;As a consequence of this research, it will become easier to avoid&lt;br/&gt;errors in an important class of useful but difficult computer programs. &lt;br/&gt;Eventually, it should be possible to automate the logic so that programs in this&lt;br/&gt;Class can be accompanied by machine-checkable proofs of their correctness</AbstractNarration>
    <MinAmdLetterDate>07/03/2002</MinAmdLetterDate>
    <MaxAmdLetterDate>06/07/2004</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>0204242</AwardID>
    <Investigator>
      <FirstName>John</FirstName>
      <LastName>Reynolds</LastName>
      <EmailAddress>john.reynolds@cs.cmu.edu</EmailAddress>
      <StartDate>07/03/2002</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Carnegie-Mellon University</Name>
      <CityName>PITTSBURGH</CityName>
      <ZipCode>152133815</ZipCode>
      <PhoneNumber>4122689527</PhoneNumber>
      <StreetAddress>5000 Forbes Avenue</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Pennsylvania</StateName>
      <StateCode>PA</StateCode>
    </Institution>
  </Award>
</rootTag>
