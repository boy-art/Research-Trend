<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>SGER: Algebraic Languages for Reconfigurable Hybrid Systems</AwardTitle>
    <AwardEffectiveDate>08/15/2002</AwardEffectiveDate>
    <AwardExpirationDate>07/31/2004</AwardExpirationDate>
    <AwardAmount>49999</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05050000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division Of Computer and Network Systems</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>D. Helen Gill</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Rounds&lt;br/&gt;CCR-0233960&lt;br/&gt;This project, under the&lt;br/&gt;embedded and hybrid systems program (EHS), investigates a surprisingly simple method for&lt;br/&gt;integrating process-algebraic techniques with hybrid automaton-based techniques for creating a mathematical foundation upon which real programming languages for hybrid and embedded systems can be based. More specifically, it addresses a new class of hybrid systems&lt;br/&gt;which can reconfigure themselves to handle different physical tasks at different times, yet operating concurrently. Very little progress has been achieved to date on such problems.&lt;br/&gt;&lt;br/&gt;This research investigates a hybrid extension of Milner's pi-calculus to allow processes written in this language to interact with continuous environments. The extension is the phi-calculus.&lt;br/&gt;The reasons for pursuing this approach are as follows. (1) The phi-calculus is believed to subsume and properly extend most of the current versions of hybrid systems; for example, hybrid automata hybrid I-O automata hybrid Petri nets, and HybridCC; (2) The goal is to be able to model distributed logical control and interaction with continuous processes in a principled structural way. The pi-calculus, using its algebraic process-structuring primitives, has been shown to be&lt;br/&gt;a rich language in which many interesting discrete concurrent phenomena can be expressed: a language for, and theory of, communicating processes which can reconfigure themselves; a language in which distributed objects and classes can be defined; and a language and theory&lt;br/&gt;capable not only of expressing interaction, but arbitrary computation, in that the lambda-calculus of Church can be translated into it; (3) This all suggests that successful hybrid versions of algebraic &lt;br/&gt;calculi will have novel and elegant ways of expressing hybrid systems --possibilities for distributed control which would be awkward, if not impossible, to express in current formalisms.</AbstractNarration>
    <MinAmdLetterDate>08/21/2002</MinAmdLetterDate>
    <MaxAmdLetterDate>08/21/2002</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>0233960</AwardID>
    <Investigator>
      <FirstName>William</FirstName>
      <LastName>Rounds</LastName>
      <EmailAddress>rounds@umich.edu</EmailAddress>
      <StartDate>08/21/2002</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>University of Michigan Ann Arbor</Name>
      <CityName>Ann Arbor</CityName>
      <ZipCode>481091274</ZipCode>
      <PhoneNumber>7347636438</PhoneNumber>
      <StreetAddress>3003 South State St. Room 1062</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Michigan</StateName>
      <StateCode>MI</StateCode>
    </Institution>
  </Award>
</rootTag>
