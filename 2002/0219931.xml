<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>ITR: Compiler Technology for Automatic Parallelization via Thread-Level Speculation</AwardTitle>
    <AwardEffectiveDate>09/01/2002</AwardEffectiveDate>
    <AwardExpirationDate>08/31/2007</AwardExpirationDate>
    <AwardAmount>300000</AwardAmount>
    <AwardInstrument>
      <Value>Continuing grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Almadena Y. Chtchelkanova</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>For many practical reasons (e.g., hardware development cost, power&lt;br/&gt;consumption, etc.), it would be attractive if we could increase the&lt;br/&gt;effective performance of a computer system by simply adding more processors&lt;br/&gt;to it. While it is reasonably straightforward to build such systems that&lt;br/&gt;support "parallel processing", relatively few of today's programs would&lt;br/&gt;enjoy any performance gain on such machines because they were not written&lt;br/&gt;with parallel processing in mind. The ideal solution for harnessing the&lt;br/&gt;potential benefits of parallel processing without placing a large burden on&lt;br/&gt;the programmer would be for the compiler to automatically transform a&lt;br/&gt;sequential program into an efficient parallel program. While there has&lt;br/&gt;been progress on using compilers to automatically "parallelize" regular&lt;br/&gt;numeric programs (typically written in FORTRAN), there has been little&lt;br/&gt;progress in automatically parallelizing broader classes of programs. The&lt;br/&gt;key stumbling block has been that compilers have traditionally created&lt;br/&gt;parallelism by proving that potential threads are always independent. To&lt;br/&gt;circumvent this limitation, recent hardware prooposals enable the compiler&lt;br/&gt;to optimistically create parallel threads without proving independence. In&lt;br/&gt;this project, we plan to develop the compiler technology necessary to fully&lt;br/&gt;exploit this new potential for harnessing parallel processors.</AbstractNarration>
    <MinAmdLetterDate>08/22/2002</MinAmdLetterDate>
    <MaxAmdLetterDate>08/17/2006</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>0219931</AwardID>
    <Investigator>
      <FirstName>Todd</FirstName>
      <LastName>Mowry</LastName>
      <EmailAddress>tcm@cs.cmu.edu</EmailAddress>
      <StartDate>08/22/2002</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Carnegie-Mellon University</Name>
      <CityName>PITTSBURGH</CityName>
      <ZipCode>152133815</ZipCode>
      <PhoneNumber>4122689527</PhoneNumber>
      <StreetAddress>5000 Forbes Avenue</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Pennsylvania</StateName>
      <StateCode>PA</StateCode>
    </Institution>
  </Award>
</rootTag>
