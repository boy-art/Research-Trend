<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>Type Refinements</AwardTitle>
    <AwardEffectiveDate>09/01/2002</AwardEffectiveDate>
    <AwardExpirationDate>08/31/2005</AwardExpirationDate>
    <AwardAmount>306000</AwardAmount>
    <AwardInstrument>
      <Value>Continuing grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Sol J. Greenspan</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>SF Proposal 0204248 Type Refinements&lt;br/&gt;Frank Pfenning and Robert Harper&lt;br/&gt;&lt;br/&gt;An important aspect of software development and maintenance is to&lt;br/&gt;understand properties of a complete system, its individual&lt;br/&gt;components, and how they interact. There is a wide range of&lt;br/&gt;properties of interest, some concerned only with the input/output&lt;br/&gt;behavior of functions, others concerned with concurrency or&lt;br/&gt;real-time requirements of processes. Upon examining the techniques&lt;br/&gt;for formally specifying, understanding, and verifying program&lt;br/&gt;behavior available today, one notices that they are almost bi-polar.&lt;br/&gt;On the one extreme we find work on proving the correctness of&lt;br/&gt;programs, on the other we find type systems for programming&lt;br/&gt;languages. Both of these have clear shortcomings: program proving&lt;br/&gt;is very expensive, time-consuming, and often infeasible, while&lt;br/&gt;present type systems support only minimal consistency properties of&lt;br/&gt;programs.&lt;br/&gt;&lt;br/&gt;The proposed research is intended to help bridge this gap by&lt;br/&gt;designing and implementing more refined type systems that allow rich&lt;br/&gt;classes of program properties to be expressed, yet still be&lt;br/&gt;automatically verified. Through careful, logically motivated design&lt;br/&gt;the research combines the best ideas from abstract interpretation,&lt;br/&gt;automated program analysis, type theory, and verification.</AbstractNarration>
    <MinAmdLetterDate>07/03/2002</MinAmdLetterDate>
    <MaxAmdLetterDate>04/22/2005</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>0204248</AwardID>
    <Investigator>
      <FirstName>Frank</FirstName>
      <LastName>Pfenning</LastName>
      <EmailAddress>fp@cs.cmu.edu</EmailAddress>
      <StartDate>07/03/2002</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Investigator>
      <FirstName>Robert</FirstName>
      <LastName>Harper</LastName>
      <EmailAddress>rwh@cs.cmu.edu</EmailAddress>
      <StartDate>07/03/2002</StartDate>
      <EndDate/>
      <RoleCode>Co-Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Carnegie-Mellon University</Name>
      <CityName>PITTSBURGH</CityName>
      <ZipCode>152133815</ZipCode>
      <PhoneNumber>4122689527</PhoneNumber>
      <StreetAddress>5000 Forbes Avenue</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Pennsylvania</StateName>
      <StateCode>PA</StateCode>
    </Institution>
    <FoaInformation>
      <Code>0000912</Code>
      <Name>Computer Science</Name>
    </FoaInformation>
  </Award>
</rootTag>
