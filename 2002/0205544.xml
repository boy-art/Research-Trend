<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>ITR: Cache-Resident Databases</AwardTitle>
    <AwardEffectiveDate>09/01/2002</AwardEffectiveDate>
    <AwardExpirationDate>08/31/2008</AwardExpirationDate>
    <AwardAmount>1100000</AwardAmount>
    <AwardInstrument>
      <Value>Continuing grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Elliott Francis</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Abstract&lt;br/&gt;&lt;br/&gt;Databases are at the very heart of the information economy. Database&lt;br/&gt;performance is a driving factor that dictates what is possible through the&lt;br/&gt;use of information technology. While database management systems have&lt;br/&gt;evolved since they were invented several decades ago, their current design&lt;br/&gt;is unfortunately antiquated given the state-of-the-art computer memory&lt;br/&gt;hierarchies of today (and even more so tomorrow). This project seeks to&lt;br/&gt;alleviate this problem.&lt;br/&gt;&lt;br/&gt;While processor speeds double every year, memory access speeds follow a&lt;br/&gt;much shallower improvement curve. To bridge this speed gap, small, fast&lt;br/&gt;memories called caches are used to hold frequently accessed data and&lt;br/&gt;instructions close to the processor. When executing database workloads,&lt;br/&gt;accesses often miss in the (fast) cache and access the (slow) memory,&lt;br/&gt;thereby reducing performance significantly. Hardware approaches are&lt;br/&gt;typically limited by access time constraints and by applicability to a wide&lt;br/&gt;range of workloads. To keep the hardware design feasible, caches typically&lt;br/&gt;use simplistic data placement and replacement schemes, and are oblivious to&lt;br/&gt;the memory access behavior of the application.&lt;br/&gt;&lt;br/&gt;Cache-conscious software methods are, on the contrary, extremely promising.&lt;br/&gt;The proposed algorithms collect data statistics in order to correctly group&lt;br/&gt;data with similar usage patterns and optimize cache utilization. By&lt;br/&gt;carefully observing behavior, data is prefetched into the cache before it&lt;br/&gt;is used. Preliminary results demonstrate that these techniques (i) minimize&lt;br/&gt;the number of misses in the cache and (ii) significantly reduce the&lt;br/&gt;incurred penalties.</AbstractNarration>
    <MinAmdLetterDate>07/01/2002</MinAmdLetterDate>
    <MaxAmdLetterDate>08/22/2007</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>0205544</AwardID>
    <Investigator>
      <FirstName>Todd</FirstName>
      <LastName>Mowry</LastName>
      <EmailAddress>tcm@cs.cmu.edu</EmailAddress>
      <StartDate>07/01/2002</StartDate>
      <EndDate/>
      <RoleCode>Co-Principal Investigator</RoleCode>
    </Investigator>
    <Investigator>
      <FirstName>Anastassia</FirstName>
      <LastName>Ailamaki</LastName>
      <EmailAddress>natassa@epfl.ch</EmailAddress>
      <StartDate>07/01/2002</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Carnegie-Mellon University</Name>
      <CityName>PITTSBURGH</CityName>
      <ZipCode>152133815</ZipCode>
      <PhoneNumber>4122689527</PhoneNumber>
      <StreetAddress>5000 Forbes Avenue</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Pennsylvania</StateName>
      <StateCode>PA</StateCode>
    </Institution>
  </Award>
</rootTag>
