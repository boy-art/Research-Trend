<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>CRII: SHF: Regression Testing for Projects with Distributed Software Histories</AwardTitle>
    <AwardEffectiveDate>05/15/2016</AwardEffectiveDate>
    <AwardExpirationDate>04/30/2018</AwardExpirationDate>
    <AwardAmount>175000</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Sol J. Greenspan</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Developers practice regression testing -- running tests against each&lt;br/&gt;project commit -- to check that project changes do not break any&lt;br/&gt;functionality. While important, regression testing is expensive due to&lt;br/&gt;the number of tests and the number of commits. Regression test&lt;br/&gt;selection (RTS) techniques speed up regression testing by skipping to&lt;br/&gt;run tests that are not affected by recent changes, and regression test&lt;br/&gt;prioritization (RTP) techniques reorder tests to run failing tests&lt;br/&gt;faster. Existing regression techniques analyze only two adjacent&lt;br/&gt;commits, effectively assuming a linear software history. However, the&lt;br/&gt;revolution in version-control systems changed the shape of software&lt;br/&gt;histories. Distributed software histories are complex graphs of&lt;br/&gt;branches and merges, which do not match the simplistic view of the&lt;br/&gt;existing techniques. Although existing regression techniques can be&lt;br/&gt;run if a distributed software history is linearized, these techniques&lt;br/&gt;underutilize the data available in the distributed software history.&lt;br/&gt;&lt;br/&gt;To speed up regression testing, the PI proposes to design techniques&lt;br/&gt;that utilize the data available in the entire distributed software&lt;br/&gt;history. This project proposes four tasks to improve RTS and RTP: (1)&lt;br/&gt;non-adjacent commit reuse - discover likely optimal commit to be used&lt;br/&gt;in each analysis rather than always analyzing adjacent commits; (2)&lt;br/&gt;multi-commit analyses - design methods that analyze more than two&lt;br/&gt;commits rather than always analyzing only two commits; (3)&lt;br/&gt;command-aware methods - specialize the methods for various commands&lt;br/&gt;that create each commit rather than be command-unaware; and (4)&lt;br/&gt;unified implementation and evaluation - share the implementation and&lt;br/&gt;results among techniques, and evaluate the techniques on open-source&lt;br/&gt;and industrial projects. The broader impacts of improving RTS and RTP&lt;br/&gt;are to increase developers' productivity and reduce the resource usage&lt;br/&gt;during testing phases.</AbstractNarration>
    <MinAmdLetterDate>05/18/2016</MinAmdLetterDate>
    <MaxAmdLetterDate>05/18/2016</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1566363</AwardID>
    <Investigator>
      <FirstName>Milos</FirstName>
      <LastName>Gligoric</LastName>
      <EmailAddress>gligoric@utexas.edu</EmailAddress>
      <StartDate>05/18/2016</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>University of Texas at Austin</Name>
      <CityName>Austin</CityName>
      <ZipCode>787121532</ZipCode>
      <PhoneNumber>5124716424</PhoneNumber>
      <StreetAddress>101 E. 27th Street, Suite 5.300</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Texas</StateName>
      <StateCode>TX</StateCode>
    </Institution>
    <ProgramElement>
      <Code>026Y</Code>
      <Text>CRII CISE Research Initiation</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>7944</Code>
      <Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>8228</Code>
      <Text>CISE Resrch Initiatn Initiatve</Text>
    </ProgramReference>
  </Award>
</rootTag>
