<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>A Performance Model for Partitioned Global Address Space Languages</AwardTitle>
    <AwardEffectiveDate>09/01/2008</AwardEffectiveDate>
    <AwardExpirationDate>08/31/2010</AwardExpirationDate>
    <AwardAmount>69994</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Almadena Y. Chtchelkanova</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Writing a program to solve a large scale computational problem on a supercomputer is much more difficult than writing a program to solve the same problem on an ordinary computer. DARPA's High Productivity Computing Systems program has focused attention on a new family of parallel programming languages that reduce the effort required to develop supercomputer programs. One of the most widely used of these languages is Unified Parallel C (UPC). This research project develops a way to predict how long UPC programs will run so that programmers will know beforehand whether their programs will run efficiently. Predicting program run times reduces the need for the trial-and-error development of programs. This saves the time of the programmers and the supercomputer, both expensive commodities.&lt;br/&gt;&lt;br/&gt;This project advances work on a performance model for UPC implementations that run on clusters. A model that describes the remote reuse distance for objects in the software cache is developed. This is a natural extension of local reuse distance for hardware cache. An analysis of remote reuse distance yields functions that predict cache behavior and its impact on performance. The effects of problem size, blocking factor, and the number of threads are included in the model. Common benchmarks, such as the NAS parallel benchmarks, are used to validate the model. The addition of a model of software cache behavior provides programmers with more accurate information about overall run times and suggests ways to improve software cache management for UPC and other languages in its family.</AbstractNarration>
    <MinAmdLetterDate>07/31/2008</MinAmdLetterDate>
    <MaxAmdLetterDate>07/31/2008</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>0833082</AwardID>
    <Investigator>
      <FirstName>Steven</FirstName>
      <LastName>Seidel</LastName>
      <EmailAddress>steve@mtu.edu</EmailAddress>
      <StartDate>07/31/2008</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Investigator>
      <FirstName>Steven</FirstName>
      <LastName>Carr</LastName>
      <EmailAddress>steve.carr@wmich.edu</EmailAddress>
      <StartDate>07/31/2008</StartDate>
      <EndDate/>
      <RoleCode>Co-Principal Investigator</RoleCode>
    </Investigator>
    <Investigator>
      <FirstName>Zhenlin</FirstName>
      <LastName>Wang</LastName>
      <EmailAddress>zlwang@mtu.edu</EmailAddress>
      <StartDate>07/31/2008</StartDate>
      <EndDate/>
      <RoleCode>Co-Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Michigan Technological University</Name>
      <CityName>Houghton</CityName>
      <ZipCode>499311295</ZipCode>
      <PhoneNumber>9064871885</PhoneNumber>
      <StreetAddress>1400 Townsend Drive</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Michigan</StateName>
      <StateCode>MI</StateCode>
    </Institution>
    <FoaInformation>
      <Code>0000912</Code>
      <Name>Computer Science</Name>
    </FoaInformation>
  </Award>
</rootTag>
