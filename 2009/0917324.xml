<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>SHF: Small: Collaborative Research: Taxonomy for the Automated Tuning of Matrix Algebra Software</AwardTitle>
    <AwardEffectiveDate>09/15/2009</AwardEffectiveDate>
    <AwardExpirationDate>08/31/2013</AwardExpirationDate>
    <AwardAmount>266000</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Balasubramanian Kalyanasundaram</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>CCF - 0917324 &lt;br/&gt;SHF: Small: Collaborative Research: Taxonomy for the Automated Tuning of Matrix Algebra Software&lt;br/&gt;PI Jessup, Elizabeth R. University of Colorado at Boulder&lt;br/&gt;CCF ? 0916474&lt;br/&gt;PI Norris, Boyana University of Chicago&lt;br/&gt;Abstract:&lt;br/&gt;In response to the need for high-performance scienti&amp;#64257;c software, we propose to study ways to ease the production of optimized matrix algebra software. Each step of the code development process presently involves many choices, most requiring expertise in numerical computation, mathematical software, compilers, or computer architecture. &lt;br/&gt;The process of converting matrix algebra from abstract algorithms to high-quality implementations is a complex one. When leveraging existing high-performance numerical libraries, the application developer must select the appropriate numerical routines and then devise ways to make these routines run e&amp;#64259;ciently on the architecture at hand. Once the numerical routine has been identi&amp;#64257;ed, the process of including it into a larger application can often be tedious or di&amp;#64259;cult. The tuning of the application itself then presents a myriad of options generally centered around one or more of the following three approaches: manually optimizing code fragments; using tuned libraries &lt;br/&gt;for key numerical algorithms; and, less frequently, using compiler-based source transformation tools for loop-level optimizations. The goals of the proposed research are three-fold. First, we will construct a taxonomy of available software that can be used to build highly-optimized matrix algebra computations. The taxonomy will provide an organized anthology of software components and programming tools needed for that task. The taxonomy will serve as a guide to practitioners seeking to learn what is available for their programming tasks, how to use it, and how the various parts &amp;#64257;t together. It will build upon and improve existing collections of numerical software, adding tools for the tuning of matrix algebra computations. Second, we will develop an initial set of tools that operate in conjunction with this taxonomy. In particular, we will provide an interface that takes a high-level description of a matrix algebra computation and produces a customizable code template using the software in the taxonomy. The template will aid the developer at all steps of the process from the initial construction of Basic Linear Algebra Subprogram (BLAS)-based codes through the full optimization of that code. Initially, the tools will accept a MATLAB prototype and produce optimized Fortran or C. Finally, we will advance the state-of-the-art in tuning tools by improving &lt;br/&gt;some of the tools included in the taxonomy, broadening their ranges of functionality in terms of problem domains and languages.</AbstractNarration>
    <MinAmdLetterDate>09/24/2009</MinAmdLetterDate>
    <MaxAmdLetterDate>05/04/2012</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>0917324</AwardID>
    <Investigator>
      <FirstName>Elizabeth</FirstName>
      <LastName>Jessup</LastName>
      <EmailAddress>jessup@cs.colorado.edu</EmailAddress>
      <StartDate>09/24/2009</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>University of Colorado at Boulder</Name>
      <CityName>Boulder</CityName>
      <ZipCode>803031058</ZipCode>
      <PhoneNumber>3034926221</PhoneNumber>
      <StreetAddress>3100 Marine Street, Room 481</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Colorado</StateName>
      <StateCode>CO</StateCode>
    </Institution>
    <FoaInformation>
      <Code>0000912</Code>
      <Name>Computer Science</Name>
    </FoaInformation>
    <ProgramElement>
      <Code>7796</Code>
      <Text>ALGORITHMIC FOUNDATIONS</Text>
    </ProgramElement>
    <ProgramElement>
      <Code>7934</Code>
      <Text>PARAL/DISTRIBUTED ALGORITHMS</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>7923</Code>
      <Text>SMALL PROJECT</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>7933</Code>
      <Text>NUM, SYMBOL, &amp; ALGEBRA COMPUT</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>9218</Code>
      <Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>9251</Code>
      <Text>RES EXPER FOR UNDERGRAD-SUPPLT</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>HPCC</Code>
      <Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
    </ProgramReference>
  </Award>
</rootTag>
