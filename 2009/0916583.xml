<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>SHF: Small: In Vivo Software Monitoring: Architectural and Compiler Support</AwardTitle>
    <AwardEffectiveDate>08/15/2009</AwardEffectiveDate>
    <AwardExpirationDate>07/31/2014</AwardExpirationDate>
    <AwardAmount>499271</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Almadena Y. Chtchelkanova</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Monitoring of software's execution is crucial in numerous software development tasks. Current monitoring efforts generally require extensive instrumentation of the software or dedicated hardware---it resembles studying the software specimens in-vitro. To fully understand software's behaviors, the production software must be studied in-vivo---in its operational environment. To address these fundamental software engineering challenges, this research addresses a framework for in-vivo monitoring and observation of software-intensive systems.&lt;br/&gt;&lt;br/&gt;Three fundamental requirements are placed on in-vivo monitoring&lt;br/&gt;frameworks: non-intrusive, low-overhead, and predictable. These frameworks must also allow low-level monitoring and be highly flexible to enable a broad range of monitoring activities. To satisfy these requirements, this research changes how software is compiled and how hardware is designed by pursuing the following specific aims: (i) provide flexible architectural support shared by a variety of monitoring activities; (ii) develop a monitor-aware compiler that generates the monitor together with the software to be monitored; and (iii) develop state extraction optimizations to efficiently extract program states from an executing application and forward the states to the monitor. The resulting framework is empirically evaluated to assess its performance as compared to related solutions and assess its flexibility for a variety of software engineering monitoring tasks.</AbstractNarration>
    <MinAmdLetterDate>08/17/2009</MinAmdLetterDate>
    <MaxAmdLetterDate>08/17/2009</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>0916583</AwardID>
    <Investigator>
      <FirstName>Mats Per Erik</FirstName>
      <LastName>Heimdahl</LastName>
      <EmailAddress>heimdahl@cs.umn.edu</EmailAddress>
      <StartDate>08/17/2009</StartDate>
      <EndDate/>
      <RoleCode>Co-Principal Investigator</RoleCode>
    </Investigator>
    <Investigator>
      <FirstName>Antonia</FirstName>
      <LastName>Zhai</LastName>
      <EmailAddress>zhaix005@umn.edu</EmailAddress>
      <StartDate>08/17/2009</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>University of Minnesota-Twin Cities</Name>
      <CityName>Minneapolis</CityName>
      <ZipCode>554552070</ZipCode>
      <PhoneNumber>6126245599</PhoneNumber>
      <StreetAddress>200 OAK ST SE</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Minnesota</StateName>
      <StateCode>MN</StateCode>
    </Institution>
    <FoaInformation>
      <Code>0000912</Code>
      <Name>Computer Science</Name>
    </FoaInformation>
  </Award>
</rootTag>
